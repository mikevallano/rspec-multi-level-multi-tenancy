require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:account) { FactoryGirl.create(:account) }
  let(:current_account) { account }
  let(:user) { FactoryGirl.create(:user) }
  let(:project) { FactoryGirl.create(:project, account_id: account.id) }
  let(:invalid_project) { FactoryGirl.build(:invalid_project) }
  let(:current_user) { login_with(user) }
  let(:invalid_user) { login_with(nil) }
  let(:valid_attributes) { FactoryGirl.attributes_for(:project) }
  let(:invalid_attributes) { FactoryGirl.attributes_for(:invalid_project) }

  shared_examples_for "with a logged in user" do

    describe "GET #index", taco: true do #taco is a tag, which can be run with rspec --tag taco
      it "assigns all projects as @projects" do
        get :index
        expect(assigns(:projects)).to eq([project])
      end

      it "renders the index template" do
        get :index
        expect(response).to render_template(:index)
      end
    end

    describe "GET #show" do
      it "assigns the requested project as @project" do
        get :show, {:id => project.to_param}
        expect(assigns(:project)).to eq(project)
      end

      it "renders the show template" do
        get :show, {:id => project.to_param}
        expect(response).to render_template(:show)
      end
    end

    describe "GET #new" do
      it "assigns a new project as @project" do
        get :new
        expect(assigns(:project)).to be_a_new(Project)
      end

      it "renders the new template" do
        get :new
        expect(response).to render_template(:new)
      end
    end

    describe "GET #edit" do
      it "assigns the requested project as @project" do
        get :edit, {:id => project.to_param}
        expect(assigns(:project)).to eq(project)
      end

      it "renders the edit template" do
        get :edit, {:id => project.to_param}
        expect(response).to render_template(:edit)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Project" do
          expect {
            post :create, {:project => valid_attributes}
          }.to change(Project, :count).by(1)
        end

        it "assigns a newly created project as @project" do
          post :create, {:project => valid_attributes}
          expect(assigns(:project)).to be_a(Project)
          expect(assigns(:project)).to be_persisted
        end

        it "redirects to the created project" do
          post :create, {:project => valid_attributes}
          expect(response).to redirect_to(Project.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved project as @project" do
          post :create, {:project => invalid_attributes}
          expect(assigns(:project)).to be_a_new(Project)
        end

        it "re-renders the 'new' template" do
          post :create, {:project => invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) { FactoryGirl.attributes_for(:project, name: "newname") }

        it "updates the requested project" do
          put :update, {:id => project.to_param, :project => new_attributes }
          project.reload
          expect(project.name).to eq("newname")
        end

        it "assigns the requested project as @project" do
          put :update, {:id => project.to_param, :project => new_attributes }
          expect(assigns(:project)).to eq(project)
        end

        it "redirects to the project" do
          put :update, {:id => project.to_param, :project => new_attributes }
          expect(response).to redirect_to(project)
        end
      end

      context "with invalid params" do
        it "assigns the project as @project" do
          put :update, {:id => project.to_param, :project => invalid_attributes }
          expect(assigns(:project)).to eq(project)
        end

        it "re-renders the 'edit' template" do
          put :update, {:id => project.to_param, :project => invalid_attributes }
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested project" do
        expect {
          delete :destroy, {:id => project.to_param}
        }.to change(Project, :count).by(-1)
      end

      it "redirects to the projects list" do
        delete :destroy, {:id => project.to_param}
        expect(response).to redirect_to(projects_url)
      end
    end

  end #logged in user shared_example

  shared_examples_for "an invalid user trying to access" do
    describe "GET #index" do
      it "redirects user to sign up page" do
        get :index
        expect(response).to redirect_to(new_user_session_path)
      end
      # it { is_expected.to redirect_to new_user_session_path }
    end

    describe "GET #show" do
      it "redirects user to sign up page" do
        get :show, {:id => project.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe "GET #new" do
      it "redirects user to sign up page" do
        get :new
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    describe "GET #edit" do
      it "redirects user to sign up page" do
        get :edit, {:id => project.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end


    describe "POST #create" do
      context "with valid params" do
        it "redirects user to sign up page" do
          post :create, {:project => valid_attributes}
          expect(response).to redirect_to(new_user_session_path)
        end
      end

      context "with invalid params" do
        it "redirects user to sign up page" do
          post :create, {:project => invalid_attributes}
          expect(response).to redirect_to(new_user_session_path)
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) { FactoryGirl.attributes_for(:project, name: "newname") }

        it "redirects user to sign up page" do
          put :update, {:id => project.to_param, :project => new_attributes }
          expect(response).to redirect_to(new_user_session_path)
        end
      end

      context "with invalid params" do
        it "redirects user to sign up page" do
          put :update, {:id => project.to_param, :project => invalid_attributes }
          expect(response).to redirect_to(new_user_session_path)
        end
      end
    end

    describe "DELETE #destroy" do
      it "redirects user to sign up page" do
        delete :destroy, {:id => project.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end

  end #invalid user shared examples

  describe "user access" do
    before :each do
      current_user
      # login_with(user)
      project
    end

    it_behaves_like 'with a logged in user'
  end #user access describe

  describe "invalid user access" do
    before :each do
      invalid_user
      # login_with(nil)
      project
    end

    it_behaves_like 'an invalid user trying to access'
  end #user access describe

end
